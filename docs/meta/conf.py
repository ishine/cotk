# -*- coding: utf-8 -*-
#
# Configuration file for the Sphinx documentation builder.
#
# This file does only contain a selection of the most common options. For a
# full list see the documentation:
# http://www.sphinx-doc.org/en/master/config

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
import os
import sys
import shutil
sys.path.insert(0, os.path.abspath('../../'))
sys.path.insert(0, os.path.abspath('../'))


# -- Project information -----------------------------------------------------

project = 'cotk'
copyright = '2018, thu-coai'
author = 'thu-coai'

# The short X.Y version
version = ''
# The full version, including alpha/beta/rc tags
release = ''


# -- General configuration ---------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'autodoc',
    'napoleon',
    'sphinx.ext.doctest',
    'sphinx.ext.todo',
    'sphinx.ext.coverage',
    'sphinx.ext.mathjax',
    'sphinx.ext.ifconfig',
    'sphinx.ext.viewcode',
    'sphinx.ext.githubpages',
	'sphinx.ext.intersphinx',
	'm2r'
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
source_suffix = ['.rst', '.md']
# source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path .
exclude_patterns = ['build', 'Thumbs.db', '.DS_Store']

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

napoleon_use_ivar = True
napoleon_use_rtype = False
napoleon_use_param = False


# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = 'sphinx_rtd_theme'
html_theme_path = ["_themes", ]

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}
html_theme_options = {
    'canonical_url': '',
    #'analytics_id': 'UA-XXXXXXX-1',  #  Provided by Google in your dashboard
    'logo_only': False,
    'display_version': True,
    'prev_next_buttons_location': 'bottom',
    'style_external_links': False,
    #'vcs_pageview_mode': '',
    # Toc options
    'collapse_navigation': True,
    'sticky_navigation': True,
    'navigation_depth': 4,
    'includehidden': True,
    'titles_only': False
}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# The default sidebars (for documents that don't match any pattern) are
# defined by theme itself.  Builtin themes are using these templates by
# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',
# 'searchbox.html']``.
#
# html_sidebars = {}


# -- Options for HTMLHelp output ---------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'cotkdoc'


# -- Options for LaTeX output ------------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, 'cotk.tex', 'cotk Documentation',
     'thu-coai', 'manual'),
]


# -- Options for manual page output ------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, 'cotk', 'cotk Documentation',
     [author], 1)
]


# -- Options for Texinfo output ----------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, 'cotk', 'cotk Documentation',
     author, 'cotk', 'One line description of project.',
     'Miscellaneous'),
]


# -- Extension configuration -------------------------------------------------

autodoc_member_order = 'bysource'

# -- Options for todo extension ----------------------------------------------

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = True
autodoc_typehints = 'none'

# import sys
# import inspect
# from sphinx.util.typing import stringify as stringify_annotation
# def autodoc_process_signature(app, what, name, obj, options, signature,
#                            return_annotation):
#     if what in ["function", "method"]:
#         return_annotation = inspect.signature(obj).return_annotation
#         if return_annotation == inspect.signature(obj).empty:
#             return_annotation = None
#         else:
#             return_annotation = stringify_annotation(return_annotation)
#     return signature, return_annotation

def setup(app):
    # app.connect('autodoc-before-process-signature', autodoc_before_process_signature)
    # app.connect('autodoc-process-signature', autodoc_process_signature)
    # mycss
    app.add_stylesheet('cotk_theme.css')

# download readme and images

models = {"LanguageGeneration": {
        "lm_tf":"LM-tensorflow",
        "vae_tf":"VAE-tensorflow",
        "seqgan_tf":"seqGAN-tensorflow"
    }, "SingleTurnDialog": {
        "seq2seq_torch": "seq2seq-pytorch",
        "seq2seq_tf":"seq2seq-tensorflow"
    }, "MultiTurnDialog": {
        "hred_tf": "hred-tensorflow",
        "cvae_tf": "CVAE-tensorflow"
    }
}


from cotk.file_utils.file_utils import _http_get
from cotk.file_utils.resource_processor import unzip_file

def copy_readme_from_github(model_name, target_path):
    print("downloading %s from github..." % model_name)
    online_path = "https://github.com/thu-coai/%s/archive/master.zip" % model_name
    local_path = os.path.join("..", "build", model_name + ".zip")
    build_dir = os.path.join("..", "build")
    local_dir = os.path.join("..", "build", model_name + "-master")
    #os.mkdirs(local_path, exist_ok=True)
    if os.path.exists(local_path):
        print("skipping %s" % model_name)
    else:
        _http_get(online_path, open(local_path, "wb"))
    unzip_file(local_path, build_dir)
    shutil.copy(os.path.join(local_dir, "Readme.md"),
            os.path.join(target_path, "Readme.md"))
    shutil.copytree(os.path.join(local_dir, "images"),
            os.path.join(target_path, "images"))

exclude_patterns = []
shutil.rmtree("./models", ignore_errors=True)
os.makedirs("./models", exist_ok=True)
for dir1, submodels in models.items():
    os.makedirs(os.path.join("./models", dir1), exist_ok=True)
    index_file = open(os.path.join("./models", dir1, "index.rst"), 'w')
    index_file.write("%s\n=========================================\n" % dir1)
    index_file.write(".. toctree::\n\n")
    for rstname, modelname in submodels.items():
        index_file.write("   %s/Readme\n" % modelname)
        os.makedirs(os.path.join("./models", dir1, modelname), exist_ok=True)
        copy_readme_from_github(modelname, os.path.join("./models", dir1, modelname))
        #shutil.copy(os.path.join("../../", "models", modelname, "Readme.md"), 
            #os.path.join("./models", dir1, modelname, "Readme.md"))
        #shutil.copytree(os.path.join("../../", "models", modelname, "images"),
            #os.path.join("./models", dir1, modelname, "images"))
    index_file.close()

#print(exclude_patterns)
